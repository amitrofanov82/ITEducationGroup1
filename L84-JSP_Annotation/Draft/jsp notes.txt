1. Определения и базовые понятия:

Технология создания текстового http-контента, который имеет как статические, так и динамические компоненты. 

Страница JSP содержит текст двух типов: 
	статические исходные данные: HTML (в экзотических случаях может быть SVG, WML, или XML)
	динамические данные: 
		прописанные через JSP-элементы (особые тэги в дополнение к статическим (статические - почти всегда HTML, экзотику не обсуждаем))
		скриптлеты
		EL(Expression Language) - механизм доступа к переменным запроса\сессии\сервера через ${...} синтаксис
	директивы(см. ниже)
	комментарии
	
		
При деплое на сервер код JSP-страницы автоматически транслируется сервером в Java-код сервлета. Поэтому правильно будет сказать, что JSP - это альтернативная, более удобная форма написания сервлета, который генерирует UI-разметку.  (этого некоторые джуниоры, написавшие не одну страницу, даже не знают, но надо знать.)

JSP странице в структуре директорий размещаются там же, где и обычные Web-страницы.





ЗАГАДКА:
  Являются ли комментарии в документе или программе причиной замедления программы.




Пример JSP страницы с использованием всех составляющих JSP: 
	https://upload.wikimedia.org/wikipedia/commons/4/49/JSP_example_with_cooments.JPG?uselang=ru

2. Hello world:


---
scriptlets:
    <%! одна или несколько деклараций (обяъвление новых переменных) %>
    <%= одно выражение %>
    <% скриплет %>	
	
	
Код внутри скриплета вставляется в том виде, как он был записан. Можно так:
<% if (Math.random() < 0.5) { %>
     <B>Удачного</B> вам дня!
<% } else { %>
     <B>Неудачного</B> вам дня!
<% } %>

После трансляции в сервлет этот кусок будет выглядеть так:
if (Math.random() < 0.5) { 
     out.println("<B>Удачного</B> вам дня!");
} else { 
     out.println("<B>Неудачного</B> вам дня!");
}

---
Переменные окружения:

 Для упрощения работы со скриптами имеются заранее определённые переменные, такие как request, response, pageContext, session, out, application, config, page, exception.
 
 
---
Директивы:
<%@ директива атрибут="значение" %> (page\include\taglib)

page - прежде всего импорты, но и некоторые другие настройки:
	<%@ page import=”java.util.*, com.myclasses.*” buffer=”15kb” %>

	все эти значения аттрибутов директивы page внедряются в данную JSP страницу и на все её вложенные статические элементы, в том чеисле вставленые с помощью директивы include или с помощью действия jsp:include
	
	аттрибуты: 
		language="java" (по умолчанию, но производитель сервера может, теоретически, и другой предоставить, например Groovy был бы удобен)
		extends="пакет.class". Задаёт суперкласс (родительский класс) для генерируемого сервлета.
		session="true|false" - используется ли на странице сессия.
		autoflush="true|false"
		isThreadSafe="true|false"
		errorPage="url"
		isErrorPage="true|false"
		contentType="MIME-Тип"
		... ещё пара штук специфических

---
include: 
	<%@ include file="относительный url" %> (относительно JSP страницы, если с "/..." то от корня apllication context'а)
									
	вставляет содержимое в это место страницы как текст. 
	=>  Загадка. Что будет, если руками изсенить инлюднутый файл на севере. 
		
	альтернатива - тжг jsp:include. Подключает файл в процессе обращения к JSP. 

---
<%@ taglib uri=”URI к библиотеке тегов, расширение tld” prefix=“префикс знака“ %>
	
Общий смысл перескажу, в детали не полезем. 
	
---	
Стандартные тэги:
    jsp:declaration — Объявление, аналогичен тегу <%! … %>;
    jsp:scriptlet — Скриптлет, аналогичен тегу <% … %>;
    jsp:expression — Выражение, аналогичен тегу <%= … %>;
    jsp:text — Вывод текста;
    jsp:useBean — Поиск или создание нового экземпляра JavaBean;
    jsp:setProperty — Установка свойств JavaBean;
    jsp:getProperty — Вставить свойство JavaBean в поток вывода;
    jsp:include — Подключает файл в момент запроса страницы;
    jsp:forward — Перенаправляет запрос на другую страницу;
    jsp:param — Добавляет параметры в объект запроса, например в элементах forward, include, plugin.;
    jsp:plugin — Генерирует код (в зависимости от типа используемого браузера), который создаёт тег OBJECT или EMBED для Java plugin;
    jsp:params — Группирует параметры внутри тега jsp:plugin;
    jsp:fallback — Указывает содержимое, которое будет использоваться браузером клиента, если подключаемый модуль не сможет запуститься. Используется внутри элемента plugin.

Например
  <jsp:useBean id="test" class="hall.SimpleBean" scope="page|request|session|application"/>
  <jsp:setProperty name="test" property="message" value="Привет, WWW" /> 
	создает новый, или берет сущетсвующий.
	
  <jsp:include page="относительный URL" flush="true" />
  <jsp:forward page="/utils/errorReporter.jsp" />

возьмется существующий, если есть. Или будет создан новый.

...
------------
Знаний хватит. Дальше только самостоятельное чтение, примеры и практика нужны для развития. 





============================
Следующие тема:
  JSTL - JavaServer Pages Standard Tag Library
		набор тэгов, расширяющих минимальный функционал JSP, вместо того, что плодить в html кучу скриптлетов. 
		Посмотрим на примерах. Знать обязательно, в курсовом проекте применять желательно. 
		
  Создание собственных библиотек тэгов - весьма желательно самостоятельно ознакомиться и понять в теории. 
	
  JSF - Альтернативный подход к созданию морды из состава JEE. Но он сам разработан на базе JSP. С концепцией и идеей желательно ознакомиться самостоятельно. Но без этого знания жить можно. 
  
  
  Концептуальная тема на осмысление - в чем заключается проблема смешанного контента, присущая JavaServer Pages.   


